/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export class StakingPlatformQueryClient {
  constructor(client, contractAddress) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.queryConfig = this.queryConfig.bind(this);
    this.queryFunds = this.queryFunds.bind(this);
    this.queryStakers = this.queryStakers.bind(this);
    this.queryStakingRewards = this.queryStakingRewards.bind(this);
    this.queryAssociatedBalances = this.queryAssociatedBalances.bind(this);
    this.queryProposals = this.queryProposals.bind(this);
    this.queryCollections = this.queryCollections.bind(this);
    this.queryCollectionsBalances = this.queryCollectionsBalances.bind(this);
  }
  queryConfig = async () => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_config: {}
    });
  };
  queryFunds = async () => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_funds: {}
    });
  };
  queryStakers = async ({
    addresses
  }) => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_stakers: {
        addresses
      }
    });
  };
  queryStakingRewards = async ({
    address
  }) => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_staking_rewards: {
        address
      }
    });
  };
  queryAssociatedBalances = async ({
    address
  }) => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_associated_balances: {
        address
      }
    });
  };
  queryProposals = async ({
    lastAmount
  }) => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_proposals: {
        last_amount: lastAmount
      }
    });
  };
  queryCollections = async ({
    addresses
  }) => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_collections: {
        addresses
      }
    });
  };
  queryCollectionsBalances = async ({
    addresses
  }) => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_collections_balances: {
        addresses
      }
    });
  };
}
export class StakingPlatformClient extends StakingPlatformQueryClient {
  constructor(client, sender, contractAddress) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.stake = this.stake.bind(this);
    this.unstake = this.unstake.bind(this);
    this.claimStakingRewards = this.claimStakingRewards.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.distributeFunds = this.distributeFunds.bind(this);
    this.removeCollection = this.removeCollection.bind(this);
    this.createProposal = this.createProposal.bind(this);
    this.rejectProposal = this.rejectProposal.bind(this);
    this.acceptProposal = this.acceptProposal.bind(this);
    this.depositTokens = this.depositTokens.bind(this);
    this.withdrawTokens = this.withdrawTokens.bind(this);
    this.receive = this.receive.bind(this);
  }
  stake = async ({
    collectionsToStake
  }, fee = "auto", memo, _funds) => {
    return await this.client.execute(this.sender, this.contractAddress, {
      stake: {
        collections_to_stake: collectionsToStake
      }
    }, fee, memo, _funds);
  };
  unstake = async ({
    collectionsToUnstake
  }, fee = "auto", memo, _funds) => {
    return await this.client.execute(this.sender, this.contractAddress, {
      unstake: {
        collections_to_unstake: collectionsToUnstake
      }
    }, fee, memo, _funds);
  };
  claimStakingRewards = async (fee = "auto", memo, _funds) => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_staking_rewards: {}
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    minter,
    owner
  }, fee = "auto", memo, _funds) => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        minter,
        owner
      }
    }, fee, memo, _funds);
  };
  distributeFunds = async ({
    addressAndWeightList
  }, fee = "auto", memo, _funds) => {
    return await this.client.execute(this.sender, this.contractAddress, {
      distribute_funds: {
        address_and_weight_list: addressAndWeightList
      }
    }, fee, memo, _funds);
  };
  removeCollection = async ({
    address
  }, fee = "auto", memo, _funds) => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_collection: {
        address
      }
    }, fee, memo, _funds);
  };
  createProposal = async ({
    proposal
  }, fee = "auto", memo, _funds) => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_proposal: {
        proposal
      }
    }, fee, memo, _funds);
  };
  rejectProposal = async ({
    id
  }, fee = "auto", memo, _funds) => {
    return await this.client.execute(this.sender, this.contractAddress, {
      reject_proposal: {
        id
      }
    }, fee, memo, _funds);
  };
  acceptProposal = async ({
    id
  }, fee = "auto", memo, _funds) => {
    return await this.client.execute(this.sender, this.contractAddress, {
      accept_proposal: {
        id
      }
    }, fee, memo, _funds);
  };
  depositTokens = async ({
    collectionAddress
  }, fee = "auto", memo, _funds) => {
    return await this.client.execute(this.sender, this.contractAddress, {
      deposit_tokens: {
        collection_address: collectionAddress
      }
    }, fee, memo, _funds);
  };
  withdrawTokens = async ({
    amount,
    collectionAddress
  }, fee = "auto", memo, _funds) => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_tokens: {
        amount,
        collection_address: collectionAddress
      }
    }, fee, memo, _funds);
  };
  receive = async ({
    amount,
    msg,
    sender
  }, fee = "auto", memo, _funds) => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, _funds);
  };
}