/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Timestamp, Uint64, Uint128, Decimal, TokenUnverified, ProposalStatus, ProposalTypeForStringAndTokenUnverified, EmissionType, Binary, StakedCollectionInfoForString, StakedTokenInfo, ProposalForStringAndTokenUnverified, FundsForTokenUnverified, CurrencyForTokenUnverified, CollectionForStringAndTokenUnverified, Cw20ReceiveMsg, QueryMsg, MigrateMsg, Token, Addr, BalancesResponseItem, FundsForToken, CurrencyForToken, ArrayOfQueryCollectionsResponseItem, QueryCollectionsResponseItem, CollectionForAddrAndToken, ArrayOfQueryCollectionsBalancesResponseItem, QueryCollectionsBalancesResponseItem, Config, ArrayOfFundsForToken, ProposalTypeForAddrAndToken, ArrayOfQueryProposalsResponseItem, QueryProposalsResponseItem, ProposalForAddrAndToken, ArrayOfQueryStakersResponseItem, QueryStakersResponseItem, StakedCollectionInfoForAddr } from "./StakingPlatform.types";
export interface StakingPlatformReadOnlyInterface {
  contractAddress: string;
  queryConfig: () => Promise<Config>;
  queryFunds: () => Promise<ArrayOfFundsForToken>;
  queryStakers: ({
    addresses
  }: {
    addresses?: string[];
  }) => Promise<ArrayOfQueryStakersResponseItem>;
  queryStakingRewards: ({
    address
  }: {
    address: string;
  }) => Promise<BalancesResponseItem>;
  queryAssociatedBalances: ({
    address
  }: {
    address: string;
  }) => Promise<BalancesResponseItem>;
  queryProposals: ({
    lastAmount
  }: {
    lastAmount?: Uint128;
  }) => Promise<ArrayOfQueryProposalsResponseItem>;
  queryCollections: ({
    addresses
  }: {
    addresses?: string[];
  }) => Promise<ArrayOfQueryCollectionsResponseItem>;
  queryCollectionsBalances: ({
    addresses
  }: {
    addresses?: string[];
  }) => Promise<ArrayOfQueryCollectionsBalancesResponseItem>;
}
export class StakingPlatformQueryClient implements StakingPlatformReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.queryConfig = this.queryConfig.bind(this);
    this.queryFunds = this.queryFunds.bind(this);
    this.queryStakers = this.queryStakers.bind(this);
    this.queryStakingRewards = this.queryStakingRewards.bind(this);
    this.queryAssociatedBalances = this.queryAssociatedBalances.bind(this);
    this.queryProposals = this.queryProposals.bind(this);
    this.queryCollections = this.queryCollections.bind(this);
    this.queryCollectionsBalances = this.queryCollectionsBalances.bind(this);
  }

  queryConfig = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_config: {}
    });
  };
  queryFunds = async (): Promise<ArrayOfFundsForToken> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_funds: {}
    });
  };
  queryStakers = async ({
    addresses
  }: {
    addresses?: string[];
  }): Promise<ArrayOfQueryStakersResponseItem> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_stakers: {
        addresses
      }
    });
  };
  queryStakingRewards = async ({
    address
  }: {
    address: string;
  }): Promise<BalancesResponseItem> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_staking_rewards: {
        address
      }
    });
  };
  queryAssociatedBalances = async ({
    address
  }: {
    address: string;
  }): Promise<BalancesResponseItem> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_associated_balances: {
        address
      }
    });
  };
  queryProposals = async ({
    lastAmount
  }: {
    lastAmount?: Uint128;
  }): Promise<ArrayOfQueryProposalsResponseItem> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_proposals: {
        last_amount: lastAmount
      }
    });
  };
  queryCollections = async ({
    addresses
  }: {
    addresses?: string[];
  }): Promise<ArrayOfQueryCollectionsResponseItem> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_collections: {
        addresses
      }
    });
  };
  queryCollectionsBalances = async ({
    addresses
  }: {
    addresses?: string[];
  }): Promise<ArrayOfQueryCollectionsBalancesResponseItem> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_collections_balances: {
        addresses
      }
    });
  };
}
export interface StakingPlatformInterface extends StakingPlatformReadOnlyInterface {
  contractAddress: string;
  sender: string;
  stake: ({
    collectionsToStake
  }: {
    collectionsToStake: StakedCollectionInfoForString[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  unstake: ({
    collectionsToUnstake
  }: {
    collectionsToUnstake: StakedCollectionInfoForString[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claimStakingRewards: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    minter,
    owner
  }: {
    minter?: string;
    owner?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  distributeFunds: ({
    addressAndWeightList
  }: {
    addressAndWeightList: string[][];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  removeCollection: ({
    address
  }: {
    address: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  createProposal: ({
    proposal
  }: {
    proposal: ProposalForStringAndTokenUnverified;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  rejectProposal: ({
    id
  }: {
    id: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  acceptProposal: ({
    id
  }: {
    id: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  depositTokens: ({
    collectionAddress
  }: {
    collectionAddress: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdrawTokens: ({
    amount,
    collectionAddress
  }: {
    amount: Uint128;
    collectionAddress: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class StakingPlatformClient extends StakingPlatformQueryClient implements StakingPlatformInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.stake = this.stake.bind(this);
    this.unstake = this.unstake.bind(this);
    this.claimStakingRewards = this.claimStakingRewards.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.distributeFunds = this.distributeFunds.bind(this);
    this.removeCollection = this.removeCollection.bind(this);
    this.createProposal = this.createProposal.bind(this);
    this.rejectProposal = this.rejectProposal.bind(this);
    this.acceptProposal = this.acceptProposal.bind(this);
    this.depositTokens = this.depositTokens.bind(this);
    this.withdrawTokens = this.withdrawTokens.bind(this);
    this.receive = this.receive.bind(this);
  }

  stake = async ({
    collectionsToStake
  }: {
    collectionsToStake: StakedCollectionInfoForString[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      stake: {
        collections_to_stake: collectionsToStake
      }
    }, fee, memo, _funds);
  };
  unstake = async ({
    collectionsToUnstake
  }: {
    collectionsToUnstake: StakedCollectionInfoForString[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      unstake: {
        collections_to_unstake: collectionsToUnstake
      }
    }, fee, memo, _funds);
  };
  claimStakingRewards = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_staking_rewards: {}
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    minter,
    owner
  }: {
    minter?: string;
    owner?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        minter,
        owner
      }
    }, fee, memo, _funds);
  };
  distributeFunds = async ({
    addressAndWeightList
  }: {
    addressAndWeightList: string[][];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      distribute_funds: {
        address_and_weight_list: addressAndWeightList
      }
    }, fee, memo, _funds);
  };
  removeCollection = async ({
    address
  }: {
    address: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_collection: {
        address
      }
    }, fee, memo, _funds);
  };
  createProposal = async ({
    proposal
  }: {
    proposal: ProposalForStringAndTokenUnverified;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_proposal: {
        proposal
      }
    }, fee, memo, _funds);
  };
  rejectProposal = async ({
    id
  }: {
    id: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      reject_proposal: {
        id
      }
    }, fee, memo, _funds);
  };
  acceptProposal = async ({
    id
  }: {
    id: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      accept_proposal: {
        id
      }
    }, fee, memo, _funds);
  };
  depositTokens = async ({
    collectionAddress
  }: {
    collectionAddress: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      deposit_tokens: {
        collection_address: collectionAddress
      }
    }, fee, memo, _funds);
  };
  withdrawTokens = async ({
    amount,
    collectionAddress
  }: {
    amount: Uint128;
    collectionAddress: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_tokens: {
        amount,
        collection_address: collectionAddress
      }
    }, fee, memo, _funds);
  };
  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, _funds);
  };
}