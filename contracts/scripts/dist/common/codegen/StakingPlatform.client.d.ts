/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint128, Binary, StakedCollectionInfoForString, ProposalForStringAndTokenUnverified, BalancesResponseItem, ArrayOfQueryCollectionsResponseItem, ArrayOfQueryCollectionsBalancesResponseItem, Config, ArrayOfFundsForToken, ArrayOfQueryProposalsResponseItem, ArrayOfQueryStakersResponseItem } from "./StakingPlatform.types";
export interface StakingPlatformReadOnlyInterface {
    contractAddress: string;
    queryConfig: () => Promise<Config>;
    queryFunds: () => Promise<ArrayOfFundsForToken>;
    queryStakers: ({ addresses }: {
        addresses?: string[];
    }) => Promise<ArrayOfQueryStakersResponseItem>;
    queryStakingRewards: ({ address }: {
        address: string;
    }) => Promise<BalancesResponseItem>;
    queryStakingRewardsPerCollection: ({ collection, staker }: {
        collection: string;
        staker: string;
    }) => Promise<BalancesResponseItem>;
    queryAssociatedBalances: ({ address }: {
        address: string;
    }) => Promise<BalancesResponseItem>;
    queryProposals: ({ lastAmount }: {
        lastAmount?: Uint128;
    }) => Promise<ArrayOfQueryProposalsResponseItem>;
    queryCollections: ({ addresses }: {
        addresses?: string[];
    }) => Promise<ArrayOfQueryCollectionsResponseItem>;
    queryCollectionsBalances: ({ addresses }: {
        addresses?: string[];
    }) => Promise<ArrayOfQueryCollectionsBalancesResponseItem>;
}
export declare class StakingPlatformQueryClient implements StakingPlatformReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    queryConfig: () => Promise<Config>;
    queryFunds: () => Promise<ArrayOfFundsForToken>;
    queryStakers: ({ addresses }: {
        addresses?: string[] | undefined;
    }) => Promise<ArrayOfQueryStakersResponseItem>;
    queryStakingRewards: ({ address }: {
        address: string;
    }) => Promise<BalancesResponseItem>;
    queryStakingRewardsPerCollection: ({ collection, staker }: {
        collection: string;
        staker: string;
    }) => Promise<BalancesResponseItem>;
    queryAssociatedBalances: ({ address }: {
        address: string;
    }) => Promise<BalancesResponseItem>;
    queryProposals: ({ lastAmount }: {
        lastAmount?: string | undefined;
    }) => Promise<ArrayOfQueryProposalsResponseItem>;
    queryCollections: ({ addresses }: {
        addresses?: string[] | undefined;
    }) => Promise<ArrayOfQueryCollectionsResponseItem>;
    queryCollectionsBalances: ({ addresses }: {
        addresses?: string[] | undefined;
    }) => Promise<ArrayOfQueryCollectionsBalancesResponseItem>;
}
export interface StakingPlatformInterface extends StakingPlatformReadOnlyInterface {
    contractAddress: string;
    sender: string;
    stake: ({ collectionsToStake }: {
        collectionsToStake: StakedCollectionInfoForString[];
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    unstake: ({ collectionsToUnstake }: {
        collectionsToUnstake: StakedCollectionInfoForString[];
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    claimStakingRewards: ({ collection }: {
        collection?: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ minter, owner }: {
        minter?: string;
        owner?: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    lock: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    unlock: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    distributeFunds: ({ addressAndWeightList }: {
        addressAndWeightList: string[][];
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    removeCollection: ({ address }: {
        address: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    createProposal: ({ proposal }: {
        proposal: ProposalForStringAndTokenUnverified;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    rejectProposal: ({ id }: {
        id: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    acceptProposal: ({ id }: {
        id: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    depositTokens: ({ collectionAddress }: {
        collectionAddress: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    withdrawTokens: ({ amount, collectionAddress }: {
        amount: Uint128;
        collectionAddress: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class StakingPlatformClient extends StakingPlatformQueryClient implements StakingPlatformInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    stake: ({ collectionsToStake }: {
        collectionsToStake: StakedCollectionInfoForString[];
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    unstake: ({ collectionsToUnstake }: {
        collectionsToUnstake: StakedCollectionInfoForString[];
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    claimStakingRewards: ({ collection }: {
        collection?: string | undefined;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ minter, owner }: {
        minter?: string | undefined;
        owner?: string | undefined;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    lock: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    unlock: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    distributeFunds: ({ addressAndWeightList }: {
        addressAndWeightList: string[][];
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    removeCollection: ({ address }: {
        address: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    createProposal: ({ proposal }: {
        proposal: ProposalForStringAndTokenUnverified;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    rejectProposal: ({ id }: {
        id: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    acceptProposal: ({ id }: {
        id: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    depositTokens: ({ collectionAddress }: {
        collectionAddress: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    withdrawTokens: ({ amount, collectionAddress }: {
        amount: Uint128;
        collectionAddress: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
