/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { Uint128, Binary, StakedCollectionInfoForString, ProposalForStringAndTokenUnverified } from "./StakingPlatform.types";
export interface StakingPlatformMsg {
    contractAddress: string;
    sender: string;
    stake: ({ collectionsToStake }: {
        collectionsToStake: StakedCollectionInfoForString[];
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    unstake: ({ collectionsToUnstake }: {
        collectionsToUnstake: StakedCollectionInfoForString[];
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    claimStakingRewards: ({ collection }: {
        collection?: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateConfig: ({ minter, owner }: {
        minter?: string;
        owner?: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    lock: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
    unlock: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
    distributeFunds: ({ addressAndWeightList }: {
        addressAndWeightList: string[][];
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeCollection: ({ address }: {
        address: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    createProposal: ({ proposal }: {
        proposal: ProposalForStringAndTokenUnverified;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    rejectProposal: ({ id }: {
        id: Uint128;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    acceptProposal: ({ id }: {
        id: Uint128;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    depositTokens: ({ collectionAddress }: {
        collectionAddress: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    withdrawTokens: ({ amount, collectionAddress }: {
        amount: Uint128;
        collectionAddress: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export declare class StakingPlatformMsgComposer implements StakingPlatformMsg {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    stake: ({ collectionsToStake }: {
        collectionsToStake: StakedCollectionInfoForString[];
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    unstake: ({ collectionsToUnstake }: {
        collectionsToUnstake: StakedCollectionInfoForString[];
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    claimStakingRewards: ({ collection }: {
        collection?: string | undefined;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateConfig: ({ minter, owner }: {
        minter?: string | undefined;
        owner?: string | undefined;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    lock: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
    unlock: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
    distributeFunds: ({ addressAndWeightList }: {
        addressAndWeightList: string[][];
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeCollection: ({ address }: {
        address: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    createProposal: ({ proposal }: {
        proposal: ProposalForStringAndTokenUnverified;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    rejectProposal: ({ id }: {
        id: Uint128;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    acceptProposal: ({ id }: {
        id: Uint128;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    depositTokens: ({ collectionAddress }: {
        collectionAddress: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    withdrawTokens: ({ amount, collectionAddress }: {
        amount: Uint128;
        collectionAddress: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
