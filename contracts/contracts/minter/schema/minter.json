{
  "contract_name": "minter",
  "contract_version": "1.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "properties": {
      "factory_type": {
        "anyOf": [
          {
            "$ref": "#/definitions/FactoryType"
          },
          {
            "type": "null"
          }
        ]
      },
      "staking_platform": {
        "type": [
          "string",
          "null"
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "FactoryType": {
        "type": "string",
        "enum": [
          "osmosis",
          "injective"
        ]
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "create_denom"
        ],
        "properties": {
          "create_denom": {
            "type": "object",
            "required": [
              "subdenom"
            ],
            "properties": {
              "subdenom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "mint_tokens"
        ],
        "properties": {
          "mint_tokens": {
            "type": "object",
            "required": [
              "amount",
              "denom",
              "mint_to_address"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "denom": {
                "type": "string"
              },
              "mint_to_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "burn_tokens"
        ],
        "properties": {
          "burn_tokens": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "set_metadata"
        ],
        "properties": {
          "set_metadata": {
            "type": "object",
            "required": [
              "metadata"
            ],
            "properties": {
              "metadata": {
                "$ref": "#/definitions/Metadata"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "factory_type": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FactoryType"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "staking_platform": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "DenomUnit": {
        "type": "object",
        "required": [
          "aliases",
          "denom",
          "exponent"
        ],
        "properties": {
          "aliases": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "denom": {
            "type": "string"
          },
          "exponent": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "FactoryType": {
        "type": "string",
        "enum": [
          "osmosis",
          "injective"
        ]
      },
      "Metadata": {
        "type": "object",
        "required": [
          "base",
          "denom_units",
          "description",
          "display",
          "name",
          "symbol"
        ],
        "properties": {
          "base": {
            "type": "string"
          },
          "denom_units": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DenomUnit"
            }
          },
          "description": {
            "type": "string"
          },
          "display": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "uri": {
            "type": [
              "string",
              "null"
            ]
          },
          "uri_hash": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "denoms_by_creator"
        ],
        "properties": {
          "denoms_by_creator": {
            "type": "object",
            "required": [
              "creator"
            ],
            "properties": {
              "creator": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "query_config"
        ],
        "properties": {
          "query_config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "string",
    "enum": []
  },
  "sudo": null,
  "responses": {
    "denoms_by_creator": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "QueryDenomsFromCreatorResponse",
      "type": "object",
      "required": [
        "denoms"
      ],
      "properties": {
        "denoms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "query_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "type": "object",
      "required": [
        "admin",
        "chain_id_dev"
      ],
      "properties": {
        "admin": {
          "$ref": "#/definitions/Addr"
        },
        "chain_id_dev": {
          "type": "string"
        },
        "factory_type": {
          "anyOf": [
            {
              "$ref": "#/definitions/FactoryType"
            },
            {
              "type": "null"
            }
          ]
        },
        "staking_platform": {
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "FactoryType": {
          "type": "string",
          "enum": [
            "osmosis",
            "injective"
          ]
        }
      }
    }
  }
}
